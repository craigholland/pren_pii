"""food_models

Revision ID: e42c58484ebd
Revises: 1e582a91028b
Create Date: 2025-05-26 20:11:42.443431

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e42c58484ebd'
down_revision = '1e582a91028b'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('food_nutrient_source',
    sa.Column('remote_id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('date_created', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('data_origin', sa.Text(), nullable=True),
    sa.Column('_metadata', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_food_nutrient_source_remote_id'), 'food_nutrient_source', ['remote_id'], unique=True)
    op.create_table('foods',
    sa.Column('remote_id', sa.Integer(), nullable=False),
    sa.Column('branded_food_category', sa.String(), nullable=True),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('brand_owner', sa.String(), nullable=True),
    sa.Column('gtin_upc', sa.String(), nullable=True),
    sa.Column('serving_size', sa.Float(), nullable=True),
    sa.Column('serving_size_unit', sa.String(), nullable=True),
    sa.Column('household_serving', sa.String(), nullable=True),
    sa.Column('household_serving_unit', sa.String(), nullable=True),
    sa.Column('publication_date', sa.Date(), nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('date_created', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('data_origin', sa.Text(), nullable=True),
    sa.Column('_metadata', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_foods_remote_id'), 'foods', ['remote_id'], unique=True)
    op.create_table('ingredients',
    sa.Column('remote_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('is_organic', sa.Boolean(), nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('date_created', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('data_origin', sa.Text(), nullable=True),
    sa.Column('_metadata', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('remote_id')
    )
    op.create_table('nutrients',
    sa.Column('remote_id', sa.Integer(), nullable=True),
    sa.Column('number', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('rank', sa.Integer(), nullable=True),
    sa.Column('unitname', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('date_created', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('data_origin', sa.Text(), nullable=True),
    sa.Column('_metadata', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('remote_id')
    )
    op.create_table('food_ingredient_assoc',
    sa.Column('food_id', sa.UUID(), nullable=False),
    sa.Column('ingredient_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('date_created', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('data_origin', sa.Text(), nullable=True),
    sa.Column('_metadata', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['food_id'], ['foods.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['ingredient_id'], ['ingredients.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('food_id', 'ingredient_id', 'id')
    )
    op.create_table('food_nutrient_derivation',
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('source_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('date_created', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('data_origin', sa.Text(), nullable=True),
    sa.Column('_metadata', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['source_id'], ['food_nutrient_source.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('label_nutrients',
    sa.Column('food_id', sa.UUID(), nullable=True),
    sa.Column('remote_id', sa.Integer(), nullable=True),
    sa.Column('fat', sa.Float(), nullable=False),
    sa.Column('saturated_fat', sa.Float(), nullable=False),
    sa.Column('trans_fat', sa.Float(), nullable=False),
    sa.Column('cholesterol', sa.Float(), nullable=False),
    sa.Column('sodium', sa.Float(), nullable=False),
    sa.Column('carbohydrates', sa.Float(), nullable=False),
    sa.Column('fiber', sa.Float(), nullable=False),
    sa.Column('sugars', sa.Float(), nullable=False),
    sa.Column('protein', sa.Float(), nullable=False),
    sa.Column('calcium', sa.Float(), nullable=False),
    sa.Column('iron', sa.Float(), nullable=False),
    sa.Column('calories', sa.Float(), nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('date_created', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('data_origin', sa.Text(), nullable=True),
    sa.Column('_metadata', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['food_id'], ['foods.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('food_id'),
    sa.UniqueConstraint('remote_id')
    )
    op.create_table('food_nutrients',
    sa.Column('remote_id', sa.Integer(), nullable=True),
    sa.Column('nutrient_id', sa.UUID(), nullable=False),
    sa.Column('derivation_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('date_created', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('data_origin', sa.Text(), nullable=True),
    sa.Column('_metadata', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['derivation_id'], ['food_nutrient_derivation.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['nutrient_id'], ['nutrients.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('remote_id')
    )
    op.create_table('food_nutrient_assoc',
    sa.Column('food_id', sa.UUID(), nullable=False),
    sa.Column('food_nutrient_id', sa.UUID(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('date_created', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('data_origin', sa.Text(), nullable=True),
    sa.Column('_metadata', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['food_id'], ['foods.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['food_nutrient_id'], ['food_nutrients.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('food_id', 'food_nutrient_id', 'id')
    )
    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('date_created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('data_origin', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('username', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='pk_users'),
    sa.UniqueConstraint('email', name='uq_users_email', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', name='uq_users_username', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.drop_table('food_nutrient_assoc')
    op.drop_table('food_nutrients')
    op.drop_table('label_nutrients')
    op.drop_table('food_nutrient_derivation')
    op.drop_table('food_ingredient_assoc')
    op.drop_table('nutrients')
    op.drop_table('ingredients')
    op.drop_index(op.f('ix_foods_remote_id'), table_name='foods')
    op.drop_table('foods')
    op.drop_index(op.f('ix_food_nutrient_source_remote_id'), table_name='food_nutrient_source')
    op.drop_table('food_nutrient_source')
    # ### end Alembic commands ###
